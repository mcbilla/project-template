package com.mcb.design.pattern.template;

/**
 * 模板模式，定义了一个算法的骨架，而将一些步骤延迟到子类中，模版方法使得子类可以在不改变算法结构的情况下，重新定义算法的步骤。
 *
 * 应用场景：
 * 实现一些操作时，整体步骤很固定，但是呢。就是其中一小部分需要改变，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。
 *
 * 实现流程：
 * 1、抽象出来的模板类一般为抽象类，在模板类里面实现部分方法，和定义部分抽象方法，然后组装好主流程
 * 2、子类继承模板类，实现主类定义的抽象方法
 *
 * 示例：
 * 去银行的营业厅办理业务需要以下步骤：1.取号、2.办业务、3.评价。三个步骤中取号和评价都是固定的流程，每个人要做的事儿都是一样的。但是办业务这个步骤根据每个人要办的事情不同所以需要有不同的实现。
 */
public class Main {
    public static void main(String[] args) {
        new UserAForBank().routineFlow();
        new UserBForBank().routineFlow();
    }
}
